/**
 * This build file handles Less/CSS & JS assets workflow
 * @author <a href="https://github.com/jarias">jarias</a>
 */
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.lesscss:lesscss:1.3.0"
    }
}

import org.lesscss.LessCompiler

/* Assets declarations */
def baseCssPath = "src/main/webapp/css"
def css = [
        layout: [
                baseDir: baseCssPath,
                files: ["$baseCssPath/bootstrap.css", "$baseCssPath/bootstrap-responsive.css", "$baseCssPath/application.css"]
        ],
        datatables: [
                baseDir: "$baseCssPath/datatables",
                files: ["$baseCssPath/datatables/datatables.css"]
        ]
]
def baseJsPath = "src/main/webapp/js"
def js = [
        layout: [
                baseDir: baseJsPath,
                files: [
                        "$baseJsPath/jquery-1.8.2.js",
                        "$baseJsPath/modernizr-2.6.2.js",
                        "$baseJsPath/bootstrap/bootstrap.js",
                        "$baseJsPath/ujs.js",
                        "$baseJsPath/i18next-1.5.7.js",
                        "$baseJsPath/application.js"
                ]
        ],
        datatables: [
                baseDir: "$baseJsPath/datatables",
                files: [
                        "$baseJsPath/datatables/jquery.dataTables.js",
                        "$baseJsPath/datatables/jquery.dataTables.bootstrap.js"
                ]
        ]
]

/**
 * This task compile any Less files into CSS
 *
 * TODO: This could use a similar syntax as to CSS & JS bundles for declaring multiple Less files
 */
task compileLess << {
    //Compile all less files
    println "\u001b[0;32m===> Compiling Less files\u001b[m"

    LessCompiler lessCompiler = new LessCompiler()
    lessCompiler.compress = true
    lessCompiler.compile(
            new File("src/main/webapp/WEB-INF/less/application.less"),
            new File("src/main/webapp/css/application.css")
    )
}

/**
 * This task combines the CSS files declare in each bundle into a single bundled file
 */
task combineCSS(dependsOn: [":compileLess"]) << {
    println "\u001b[0;32m===> Combining CSS bundles\u001b[m"
    css.each {bundle, attr ->
        if (attr.files.size() > 1) {
            ant.concat(destfile: ("${attr.baseDir}/${bundle}.css" as File).canonicalPath, fixlastline: 'yes') {
                files(attr.files).each {
                    fileset(file: it)
                }
            }
        }
    }
}

/**
 * This task combines the JS files declare in each bundle into a single bundled file
 */
task combineJS() << {
    println "\u001b[0;32m===> Combining JS bundles\u001b[m"
    js.each {bundle, attr ->
        if (attr.files.size() > 1) {
            ant.concat(destfile: ("${attr.baseDir}/${bundle}.js" as File).canonicalPath, fixlastline: 'yes') {
                files(attr.files).each {
                    fileset(file: it)
                }
            }
        }
    }
}

/**
 * This task compress all the CSS & JS declare in the css and js maps
 */
task compressAll(dependsOn: [":combineCSS", ":combineJS"]) << {
    ant {
        taskdef(name: "yuicompressor",
                classname: "net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask",
                classpath: configurations.yui.asPath)
        println "\u001b[0;32m===> Compressing CSS\u001b[m"
        css.each {bundle, attr ->
            yuicompressor(jsSuffix: ".min.js", cssSuffix: ".min.css", fromDir: attr.baseDir, toDir: attr.baseDir, warn: false) {
                include(name: "${bundle}.css")
                exclude(name: "*.min.css")
            }
            if (attr.files.size() > 1) {
                ant.delete(file: "${attr.baseDir}/${bundle}.css")
            }
        }
        println "\u001b[0;32m===> Compressing Javascript\u001b[m"
        js.each {bundle, attr ->
            yuicompressor(jsSuffix: ".min.js", cssSuffix: ".min.css", fromDir: attr.baseDir, toDir: attr.baseDir, warn: false) {
                include(name: "${bundle}.js")
                exclude(name: "*.min.js")
            }
            if (attr.files.size() > 1) {
                ant.delete(file: "${attr.baseDir}/${bundle}.js")
            }
        }
    }
}