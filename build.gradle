buildscript {
    repositories {
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = "GitHub"
            addArtifactPattern "http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]"
        }
        mavenCentral()
    }

    dependencies {
        classpath "bmuschko:gradle-tomcat-plugin:0.8.2"
        classpath "org.lesscss:lesscss:1.3.0"
    }
}

import org.lesscss.LessCompiler
import groovy.xml.StreamingMarkupBuilder
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.stream.StreamSource
import javax.xml.transform.OutputKeys
import javax.xml.transform.TransformerFactory

apply plugin: "java"
apply plugin: "war"
apply plugin: "tomcat"
apply plugin: "jetty"
//apply plugin: "groovy"
apply plugin: "idea"
//apply plugin: "eclipse"

repositories {
    add(new org.apache.ivy.plugins.resolver.URLResolver()) {
        name = "Edify S3"
        addArtifactPattern "https://s3.amazonaws.com/edify-soft/[organisation]/[module]/[module]-[revision].[ext]"
    }
    maven {
        url "http://repo.springsource.org/release"
    }
    maven {
        url "http://repo.springsource.org/milestone"
    }
    maven {
        url "http://artifactory.edify.cr/artifactory/repo"
    }
    mavenCentral()
}

version = "0.0.1"
group = "change.me"

/**********************************************
 * Uncomment for Groovy/Java cross compilation *
 ***********************************************
 sourceSets.main.java.srcDirs = []
 sourceSets.main.groovy.srcDir 'src/main/java'
 sourceSets.test.java.srcDirs = []
 sourceSets.test.groovy.srcDir 'src/test/java'
 ********************************************* */

configurations {
    all*.exclude group: "commons-logging"
    all*.exclude module: "log4j"
    yui
    liquibase
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.1'
}

war {
    dependsOn += ["compressAll"]
}

task generateChangelog << {
    println "\u001b[0;32m===> Generating Liquibase Changelog [${outputFile}]\u001b[m"
    ant {
        path(id: "classpath") {
            pathelement(path: configurations.liquibase.asPath)
        }
        taskdef(name: "generateChangeLog", classname: "liquibase.integration.ant.GenerateChangeLogTask", classpathref: "classpath")
        generateChangeLog(outputFile: "$basedir/src/main/resources/db/changelog/${outputFile}",
                driver: DATABASE_DRIVER_CLASSNAME,
                url: DATABASE_URL,
                username: DATABASE_USERNAME,
                password: DATABASE_PASSWORD,
                classpathref: "classpath")
    }
    def masterChangelogFile = new File("src/main/resources/db/changelog/db.changelog-master.xml")
    def root = new XmlSlurper(false, false).parse(masterChangelogFile)
    root.appendNode {
        include(file: outputFile, relativeToChangelogFile: "true")
    }

    String xml = (new StreamingMarkupBuilder()).bind{ mkp.yield root }
    //Pretty print since StreamingMarkupBuilder doesn't support it
    def factory = TransformerFactory.newInstance()
    factory.setAttribute("indent-number", 4);
    javax.xml.transform.Transformer transformer = factory.newTransformer()
    transformer.setOutputProperty(OutputKeys.INDENT, 'yes')
    StreamResult result = new StreamResult(new StringWriter())
    transformer.transform(new StreamSource(new ByteArrayInputStream(xml.bytes)), result)
    //Write the new XML back to the master changelog file
    masterChangelogFile.write result.writer.toString()
}

task updateDatabase << {
    println "\u001b[0;32m===> Migrating database to latest changeset\u001b[m"
    ant {
        path(id: "classpath") {
            pathelement(path: configurations.liquibase.asPath)
        }
        taskdef(name: "updateDatabase", classname: "liquibase.integration.ant.DatabaseUpdateTask", classpathref: "classpath")
        updateDatabase(changeLogFile: "$basedir/src/main/resources/db/changelog/db.changelog-master.xml",
                driver: DATABASE_DRIVER_CLASSNAME,
                url: DATABASE_URL,
                username: DATABASE_USERNAME,
                password: DATABASE_PASSWORD,
                promptOnNonLocalDatabase: true,
                dropFirst: false,
                classpathref: "classpath")
    }
}

task tagDatabase << {
    println "\u001b[0;32m===> Tag the database for rollback\u001b[m"
    ant {
        path(id: "classpath") {
            pathelement(path: configurations.liquibase.asPath)
        }
        taskdef(name: "tagDatabase", classname: "liquibase.integration.ant.TagDatabaseTask", classpathref: "classpath")
        tagDatabase(driver: DATABASE_DRIVER_CLASSNAME,
                url: DATABASE_URL,
                username: DATABASE_USERNAME,
                password: DATABASE_PASSWORD,
                classpathref: "classpath",
                tag: tag)
    }
}

task rollbackDatabase << {
    println "\u001b[0;32m===> Rollback database to tag [$tag]\u001b[m"
    ant {
        path(id: "classpath") {
            pathelement(path: configurations.liquibase.asPath)
        }
        taskdef(name: "rollbackDatabase", classname: "liquibase.integration.ant.DatabaseRollbackTask", classpathref: "classpath")
        rollbackDatabase(changeLogFile: "$basedir/src/main/resources/db/changelog/db.changelog-master.xml",
                driver: DATABASE_DRIVER_CLASSNAME,
                url: DATABASE_URL,
                username: DATABASE_USERNAME,
                password: DATABASE_PASSWORD,
                classpathref: "classpath",
                rollbackTag: tag)
    }
}

task dbDoc << {
    println "\u001b[0;32m===> Generating dbdoc database documentation\u001b[m"
    ant {
        path(id: "classpath") {
            pathelement(path: configurations.liquibase.asPath)
        }
        taskdef(name: "dbDoc", classname: "liquibase.integration.ant.DBDocTask", classpathref: "classpath")
        dbDoc(changeLogFile: "$basedir/src/main/resources/db/changelog/db.changelog-master.xml",
                driver: DATABASE_DRIVER_CLASSNAME,
                url: DATABASE_URL,
                username: DATABASE_USERNAME,
                password: DATABASE_PASSWORD,
                classpathref: "classpath",
                outputDirectory: "$buildDir/dbdoc")
    }
}

task compileLess << {
    //Compile all less files
    println "\u001b[0;32m===> Compiling Less files\u001b[m"

    LessCompiler lessCompiler = new LessCompiler()
    lessCompiler.compress = true
    lessCompiler.compile(
            new File("src/main/webapp/WEB-INF/less/application.less"),
            new File("src/main/webapp/css/application.css")
    )
}

task compressAll(dependsOn: [":compileLess"]) << {
    println "\u001b[0;32m===> Compressing CSS\u001b[m"
    ant {
        taskdef(name: "yuicompressor",
                classname: "net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask",
                classpath: configurations.yui.asPath)
        yuicompressor(jsSuffix: ".min.js", cssSuffix: ".min.css", fromDir: "src/main/webapp/css", toDir: "src/main/webapp/css", warn: false) {
            include(name: "*.css")
            exclude(name: "*.min.css")
        }
    }
    println "\u001b[0;32m===> Compressing Javascript\u001b[m"
    ant {
        taskdef(name: "yuicompressor",
                classname: "net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask",
                classpath: configurations.yui.asPath)
        ["src/main/webapp/js"].each {
            yuicompressor(jsSuffix: ".min.js", cssSuffix: ".min.css", fromDir: it, toDir: it, warn: false) {
                include(name: "*.js")
                exclude(name: "*.min.js")
            }
        }
    }
}

processResources {
    filter(org.apache.tools.ant.filters.ReplaceTokens,
            tokens: [
                    LOGBACK_SYSLOG_HOST: LOGBACK_SYSLOG_HOST,
                    LOGBACK_SYSLOG_PORT: LOGBACK_SYSLOG_PORT,
                    LOGBACK_APPENDER: LOGBACK_APPENDER,
                    LOGBACK_LOG_FILE_LOCATION: LOGBACK_LOG_FILE_LOCATION,
                    HIBERNATE_DIALECT: HIBERNATE_DIALECT,
                    DATABASE_PASSWORD: DATABASE_PASSWORD,
                    DATABASE_URL: DATABASE_URL,
                    DATABASE_USERNAME: DATABASE_USERNAME,
                    DATABASE_DRIVER_CLASSNAME: DATABASE_DRIVER_CLASSNAME,
            ])
}

def hibernate = [
        "org.hibernate:hibernate-core:$HIBERNATE_VERSION",
        "org.hibernate:hibernate-validator:4.3.0.Final",
        "org.hibernate:hibernate-entitymanager:$HIBERNATE_VERSION",
        "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final"]

dependencies {
    //groovy("org.codehaus.groovy:groovy-all:2.0.1")
    providedCompile("javax.servlet:servlet-api:2.5", "javax.el:el-api:2.2", "javax.servlet.jsp:jsp-api:2.1")
    testCompile("junit:junit:4.10", "org.easymock:easymock:3.1")
    // ** Hibernate **
    hibernate.collect {
        compile(it) {
            exclude(group: "cglib", module: "cglib")
            exclude(group: "org.jboss.spec.javax.transaction", module: "jboss-transaction-api_1.1_spec")
        }
    }
    compile("org.springframework.security.oauth:spring-security-oauth:1.0.0.RC2") {
        exclude(group: "org.springframework.security")
        exclude(group: "org.springframework")
    }
    // ** Spring **
    compile "org.springframework:spring-core:$SPRING_VERSION"
    compile "org.springframework:spring-context:$SPRING_VERSION"
    compile "org.springframework:spring-aop:$SPRING_VERSION"
    compile "org.springframework:spring-aspects:$SPRING_VERSION"
    compile "org.springframework:spring-tx:$SPRING_VERSION"
    compile "org.springframework:spring-jdbc:$SPRING_VERSION"
    compile "org.springframework:spring-orm:$SPRING_VERSION"
    compile "org.springframework:spring-web:$SPRING_VERSION"
    compile "org.springframework:spring-webmvc:$SPRING_VERSION"
    compile "org.springframework:spring-context-support:$SPRING_VERSION"
    compile "org.springframework:spring-test:$SPRING_VERSION"
    // ** AspectJ **
    compile "org.aspectj:aspectjrt:1.7.0"
    // ** Spring Security **
    compile "org.springframework.security:spring-security-core:$SPRING_SECURITY_VERSION"
    compile "org.springframework.security:spring-security-config:$SPRING_SECURITY_VERSION"
    compile "org.springframework.security:spring-security-web:$SPRING_SECURITY_VERSION"
    // ** Spring Data JPA **
    compile "org.springframework.data:spring-data-jpa:$SPRING_DATA_JPA_VERSION"
    // ** Scribe OAuth **
    compile "org.scribe:scribe:1.3.1"
    // ** SiteMesh **
    compile "opensymphony:sitemesh:2.4.2"
    // ** Apache Commons **
    compile "commons-fileupload:commons-fileupload:1.2.2"
    compile "commons-digester:commons-digester:2.1"
    compile "commons-lang:commons-lang:2.6"
    compile "commons-pool:commons-pool:1.6"
    compile "commons-codec:commons-codec:1.6"
    // ** BoneCP **
    compile "com.jolbox:bonecp:0.7.1.RELEASE"
    // ** SLF4J **
    compile "org.slf4j:slf4j-api:$SLF4J_VERSION"
    runtime "org.slf4j:jcl-over-slf4j:$SLF4J_VERSION"
    runtime "org.slf4j:log4j-over-slf4j:$SLF4J_VERSION"
    // ** LogBack **
    compile "ch.qos.logback:logback-core:1.0.6"
    compile "ch.qos.logback:logback-classic:1.0.6"
    // ** Other **
    compile "joda-time:joda-time:2.1"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.8"
    compile "cglib:cglib-nodep:2.2.2"
    // ** Database **
    compile "postgresql:postgresql:9.1-901.jdbc4"
    // ** Javax **
    compile "javax.mail:mail:1.4.1"
    compile "javax.activation:activation:1.1.1"
    compile "javax.servlet:jstl:1.2"
    compile "javax.transaction:jta:1.1"
    compile "javax.validation:validation-api:1.0.0.GA"
    // ** Web Filters **
    compile "net.sf.ehcache:ehcache-web:2.0.4"
    compile "org.tuckey:urlrewritefilter:4.0.4"

    runtime "janino:janino:2.5.10"

    def tomcatVersion = "6.0.35"
    tomcat "org.apache.tomcat:catalina:${tomcatVersion}"
    tomcat "org.apache.tomcat:coyote:${tomcatVersion}"
    tomcat "org.apache.tomcat:jasper:${tomcatVersion}"
    yui "com.yahoo.platform.yui:yuicompressor:2.4.6"
    yui "noha:yui-compressor-ant-task:0.5.1"
    liquibase "org.liquibase:liquibase-core:2.0.5"
    liquibase "postgresql:postgresql:9.1-901.jdbc4"
    liquibase "org.hibernate:hibernate-core:$HIBERNATE_VERSION"
}
