/**
 * This is the main Gradle build file
 *
 * @author <a href="https://github.com/jarias">jarias</a>
 */
buildscript {
    repositories {
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = "GitHub"
            addArtifactPattern "http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]"
        }
        mavenCentral()
    }

    dependencies {
        classpath "bmuschko:gradle-tomcat-plugin:0.8.2"
    }
}

import groovy.xml.MarkupBuilder

apply plugin: "java"
apply plugin: "war"
apply plugin: "tomcat"
apply plugin: "jetty"
//apply plugin: "groovy"
apply plugin: "idea"
//apply plugin: "eclipse"
apply from: "liquibase.gradle"
apply from: "assets.gradle"

repositories {
    add(new org.apache.ivy.plugins.resolver.URLResolver()) {
        name = "Edify S3"
        addArtifactPattern "https://s3.amazonaws.com/edify-soft/[organisation]/[module]/[module]-[revision].[ext]"
    }
    maven {
        url "http://repo.springsource.org/release"
    }
    maven {
        url "http://repo.springsource.org/milestone"
    }
    maven {
        url "http://artifactory.edify.cr/artifactory/repo"
    }
    mavenCentral()
}

version = "1.1.0"
group = "com.edify"

/*
 -- Uncomment for Groovy/Java cross compilation --

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDir 'src/main/java'
sourceSets.test.java.srcDirs = []
sourceSets.test.groovy.srcDir 'src/test/java'
*/

configurations {
    all*.exclude group: "commons-logging"
    all*.exclude module: "log4j"
    yui
}

war {
    dependsOn += ["compressAll", "generateRebel"]
}

/**
 * Gradle wrapper task
 */
task wrapper(type: Wrapper) {
    gradleVersion = '1.2'
}

/**
 * This task generates the Jrebel XML config file
 */
task generateRebel << {
    def rebelFile = sourceSets.main.output.classesDir.absolutePath + '/rebel.xml'

    def srcWebApp = project.webAppDir.absolutePath
    def writer = new FileWriter(rebelFile)
    new MarkupBuilder(writer).application() {
        classpath {
            dir(name: sourceSets.main.output.classesDir.absolutePath)
        }
        web {
            link(target: '/') {
                dir(name: srcWebApp)
            }
        }
    }
}

/**
 * This task runs the Seed class for data population
 */
task(dbSeed, type: JavaExec) {
    main = "com.edify.db.Seed"
    classpath = sourceSets.main.runtimeClasspath
}

processResources {
    filter(org.apache.tools.ant.filters.ReplaceTokens,
            tokens: [
                    LOGBACK_SYSLOG_HOST: LOGBACK_SYSLOG_HOST,
                    LOGBACK_SYSLOG_PORT: LOGBACK_SYSLOG_PORT,
                    LOGBACK_APPENDER: LOGBACK_APPENDER,
                    LOGBACK_LOG_FILE_LOCATION: LOGBACK_LOG_FILE_LOCATION,
                    HIBERNATE_DIALECT: HIBERNATE_DIALECT,
                    DATABASE_PASSWORD: DATABASE_PASSWORD,
                    DATABASE_URL: DATABASE_URL,
                    DATABASE_USERNAME: DATABASE_USERNAME,
                    DATABASE_DRIVER_CLASSNAME: DATABASE_DRIVER_CLASSNAME,
            ])
}

def versions = [
        spring: "3.1.2.RELEASE",
        springSecurity: "3.1.2.RELEASE",
        springDataJpa: "1.2.0.RELEASE",
        slf4j: "1.6.6",
        hibernate: "4.1.7.Final",
        groovy: "2.0.5",
        tomcat: "6.0.35",
        logback: "1.0.6"
]

def hibernate = [
        "org.hibernate:hibernate-core:${versions.hibernate}",
        "org.hibernate:hibernate-validator:4.3.0.Final",
        "org.hibernate:hibernate-entitymanager:${versions.hibernate}",
        "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final"]

dependencies {
    //groovy("org.codehaus.groovy:groovy-all:${versions.groovy}")
    providedCompile("javax.servlet:servlet-api:2.5", "javax.el:el-api:2.2", "javax.servlet.jsp:jsp-api:2.1")
    testCompile("junit:junit:4.10", "org.easymock:easymock:3.1")
    // ** Hibernate **
    hibernate.collect {
        compile(it) {
            exclude(group: "cglib", module: "cglib")
            exclude(group: "org.jboss.spec.javax.transaction", module: "jboss-transaction-api_1.1_spec")
        }
    }
    compile("org.springframework.security.oauth:spring-security-oauth:1.0.0.RC2") {
        exclude(group: "org.springframework.security")
        exclude(group: "org.springframework")
    }
    // ** Spring **
    compile "org.springframework:spring-core:${versions.spring}"
    compile "org.springframework:spring-context:${versions.spring}"
    compile "org.springframework:spring-aop:${versions.spring}"
    compile "org.springframework:spring-aspects:${versions.spring}"
    compile "org.springframework:spring-tx:${versions.spring}"
    compile "org.springframework:spring-jdbc:${versions.spring}"
    compile "org.springframework:spring-orm:${versions.spring}"
    compile "org.springframework:spring-web:${versions.spring}"
    compile "org.springframework:spring-webmvc:${versions.spring}"
    compile "org.springframework:spring-context-support:${versions.spring}"
    compile "org.springframework:spring-test:${versions.spring}"
    // ** AspectJ **
    compile "org.aspectj:aspectjrt:1.7.0"
    // ** Spring Security **
    compile "org.springframework.security:spring-security-core:${versions.springSecurity}"
    compile "org.springframework.security:spring-security-config:${versions.springSecurity}"
    compile "org.springframework.security:spring-security-web:${versions.springSecurity}"
    compile "org.springframework.security:spring-security-taglibs:${versions.springSecurity}"
    // ** Spring Data JPA **
    compile "org.springframework.data:spring-data-jpa:${versions.springDataJpa}"
    // ** Scribe OAuth **
    compile "org.scribe:scribe:1.3.1"
    // ** SiteMesh **
    compile "opensymphony:sitemesh:2.4.2"
    // ** Apache Commons **
    compile "commons-fileupload:commons-fileupload:1.2.2"
    compile "commons-digester:commons-digester:2.1"
    compile "commons-lang:commons-lang:2.6"
    compile "commons-pool:commons-pool:1.6"
    compile "commons-codec:commons-codec:1.6"
    // ** BoneCP **
    compile "com.jolbox:bonecp:0.7.1.RELEASE"
    // ** SLF4J **
    compile "org.slf4j:slf4j-api:${versions.slf4j}"
    runtime "org.slf4j:jcl-over-slf4j:${versions.slf4j}"
    runtime "org.slf4j:log4j-over-slf4j:${versions.slf4j}"
    // ** LogBack **
    compile "ch.qos.logback:logback-core:${versions.logback}"
    compile "ch.qos.logback:logback-classic:${versions.logback}"
    // ** Other **
    compile "com.google.guava:guava:13.0.1"
    compile "joda-time:joda-time:2.1"
    compile "org.codehaus.jackson:jackson-mapper-asl:1.9.9"
    compile "cglib:cglib-nodep:2.2.2"
    // ** Database **
    compile "postgresql:postgresql:9.1-901.jdbc4"
    // ** Javax **
    compile "javax.mail:mail:1.4.1"
    compile "javax.activation:activation:1.1.1"
    compile "javax.servlet:jstl:1.2"
    compile "javax.transaction:jta:1.1"
    compile "javax.validation:validation-api:1.0.0.GA"
    // ** Web Filters **
    compile "net.sf.ehcache:ehcache-web:2.0.4"
    compile "org.tuckey:urlrewritefilter:4.0.4"
    // ** Liquibase **
    compile "org.liquibase:liquibase-core:2.0.5"

    runtime "janino:janino:2.5.10"

    tomcat "org.apache.tomcat:catalina:${versions.tomcat}"
    tomcat "org.apache.tomcat:coyote:${versions.tomcat}"
    tomcat "org.apache.tomcat:jasper:${versions.tomcat}"
    yui "com.yahoo.platform.yui:yuicompressor:2.4.6"
    yui "noha:yui-compressor-ant-task:0.5.1"
}
